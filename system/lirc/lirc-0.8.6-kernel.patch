--- lirc/drivers/lirc_dev/lirc_dev.h.orig	2010-02-28 16:33:05.210077759 +0100
+++ lirc/drivers/lirc_dev/lirc_dev.h	2010-02-28 17:04:20.938090550 +0100
@@ -30,221 +30,101 @@
 
 struct lirc_buffer {
 	wait_queue_head_t wait_poll;
-	spinlock_t lock;
+	spinlock_t fifo_lock;
 	unsigned int chunk_size;
 	unsigned int size; /* in chunks */
 	/* Using chunks instead of bytes pretends to simplify boundary checking
 	 * And should allow for some performance fine tunning later */
-#ifdef LIRC_HAVE_KFIFO
-	struct kfifo *fifo;
-#else
-	unsigned int fill; /* in chunks */
-	int head, tail;    /* in chunks */
-	unsigned char *data;
-#endif
+	struct kfifo fifo;
+	u8 fifo_initialized;
 };
-#ifndef LIRC_HAVE_KFIFO
-static inline void lirc_buffer_lock(struct lirc_buffer *buf,
-				    unsigned long *flags)
-{
-	spin_lock_irqsave(&buf->lock, *flags);
-}
-static inline void lirc_buffer_unlock(struct lirc_buffer *buf,
-				      unsigned long *flags)
-{
-	spin_unlock_irqrestore(&buf->lock, *flags);
-}
-static inline void _lirc_buffer_clear(struct lirc_buffer *buf)
-{
-	buf->head = 0;
-	buf->tail = 0;
-	buf->fill = 0;
-}
-#endif
 static inline void lirc_buffer_clear(struct lirc_buffer *buf)
 {
-#ifdef LIRC_HAVE_KFIFO
-	if (buf->fifo)
-		kfifo_reset(buf->fifo);
-#else
 	unsigned long flags;
-	lirc_buffer_lock(buf, &flags);
-	_lirc_buffer_clear(buf);
-	lirc_buffer_unlock(buf, &flags);
-#endif
+
+	if (buf->fifo_initialized) {
+		spin_lock_irqsave(&buf->fifo_lock, flags);
+		kfifo_reset(&buf->fifo);
+		spin_unlock_irqrestore(&buf->fifo_lock, flags);
+	} else
+		WARN(1, "calling %s on an uninitialized lirc_buffer\n", __func__);
 }
 static inline int lirc_buffer_init(struct lirc_buffer *buf,
 				    unsigned int chunk_size,
 				    unsigned int size)
 {
+	int ret;
+
 	init_waitqueue_head(&buf->wait_poll);
-	spin_lock_init(&buf->lock);
-#ifndef LIRC_HAVE_KFIFO
-	_lirc_buffer_clear(buf);
-#endif
+	spin_lock_init(&buf->fifo_lock);
 	buf->chunk_size = chunk_size;
 	buf->size = size;
-#ifdef LIRC_HAVE_KFIFO
-	buf->fifo = kfifo_alloc(size*chunk_size, GFP_KERNEL, &buf->lock);
-	if (!buf->fifo)
-		return -ENOMEM;
-#else
-	buf->data = kmalloc(size*chunk_size, GFP_KERNEL);
-	if (buf->data == NULL)
-		return -ENOMEM;
-	memset(buf->data, 0, size*chunk_size);
-#endif
-	return 0;
+	ret = kfifo_alloc(&buf->fifo, size * chunk_size, GFP_KERNEL);
+	if (ret == 0)
+		buf->fifo_initialized = 1;
+	return ret;
 }
 static inline void lirc_buffer_free(struct lirc_buffer *buf)
 {
-#ifdef LIRC_HAVE_KFIFO
-	if (buf->fifo)
-		kfifo_free(buf->fifo);
-#else
-	kfree(buf->data);
-	buf->data = NULL;
-	buf->head = 0;
-	buf->tail = 0;
-	buf->fill = 0;
-	buf->chunk_size = 0;
-	buf->size = 0;
-#endif
+	if (buf->fifo_initialized) {
+		kfifo_free(&buf->fifo);
+		buf->fifo_initialized = 0;
+	} else
+		WARN(1, "calling %s on an uninitialized lirc_buffer\n", __func__);
 }
-#ifndef LIRC_HAVE_KFIFO
-static inline int  _lirc_buffer_full(struct lirc_buffer *buf)
+static inline int lirc_buffer_len(struct lirc_buffer *buf)
 {
-	return (buf->fill >= buf->size);
-}
-#endif
-static inline int  lirc_buffer_full(struct lirc_buffer *buf)
-{
-#ifdef LIRC_HAVE_KFIFO
-	return kfifo_len(buf->fifo) == buf->size * buf->chunk_size;
-#else
+	int len;
 	unsigned long flags;
-	int ret;
-	lirc_buffer_lock(buf, &flags);
-	ret = _lirc_buffer_full(buf);
-	lirc_buffer_unlock(buf, &flags);
-	return ret;
-#endif
+
+	spin_lock_irqsave(&buf->fifo_lock, flags);
+	len = kfifo_len(&buf->fifo);
+	spin_unlock_irqrestore(&buf->fifo_lock, flags);
+
+	return len;
 }
-#ifndef LIRC_HAVE_KFIFO
-static inline int  _lirc_buffer_empty(struct lirc_buffer *buf)
+
+static inline int  lirc_buffer_full(struct lirc_buffer *buf)
 {
-	return !(buf->fill);
+	return lirc_buffer_len(buf) == buf->size * buf->chunk_size;
 }
-#endif
 static inline int  lirc_buffer_empty(struct lirc_buffer *buf)
 {
-#ifdef LIRC_HAVE_KFIFO
-	return !kfifo_len(buf->fifo);
-#else
-	unsigned long flags;
-	int ret;
-	lirc_buffer_lock(buf, &flags);
-	ret = _lirc_buffer_empty(buf);
-	lirc_buffer_unlock(buf, &flags);
-	return ret;
-#endif
-}
-#ifndef LIRC_HAVE_KFIFO
-static inline int  _lirc_buffer_available(struct lirc_buffer *buf)
-{
-	return (buf->size - buf->fill);
+	return !lirc_buffer_len(buf);
 }
-#endif
 static inline int  lirc_buffer_available(struct lirc_buffer *buf)
 {
-#ifdef LIRC_HAVE_KFIFO
-	return buf->size - (kfifo_len(buf->fifo) / buf->chunk_size);
-#else
-	unsigned long flags;
-	int ret;
-	lirc_buffer_lock(buf, &flags);
-	ret = _lirc_buffer_available(buf);
-	lirc_buffer_unlock(buf, &flags);
-	return ret;
-#endif
-}
-#ifndef LIRC_HAVE_KFIFO
-static inline void _lirc_buffer_read_1(struct lirc_buffer *buf,
-				       unsigned char *dest)
-{
-	memcpy(dest, &buf->data[buf->head*buf->chunk_size], buf->chunk_size);
-	buf->head = mod(buf->head+1, buf->size);
-	buf->fill -= 1;
+	return buf->size - (lirc_buffer_len(buf) / buf->chunk_size);
 }
-#endif
-static inline void lirc_buffer_read(struct lirc_buffer *buf,
+static inline unsigned int lirc_buffer_read(struct lirc_buffer *buf,
 				    unsigned char *dest)
 {
-#ifdef LIRC_HAVE_KFIFO
-	if (kfifo_len(buf->fifo) >= buf->chunk_size)
-		kfifo_get(buf->fifo, dest, buf->chunk_size);
-#else
-	unsigned long flags;
-	lirc_buffer_lock(buf, &flags);
-	_lirc_buffer_read_1(buf, dest);
-	lirc_buffer_unlock(buf, &flags);
-#endif
-}
-#ifndef LIRC_HAVE_KFIFO
-static inline void _lirc_buffer_write_1(struct lirc_buffer *buf,
-				      unsigned char *orig)
-{
-	memcpy(&buf->data[buf->tail*buf->chunk_size], orig, buf->chunk_size);
-	buf->tail = mod(buf->tail+1, buf->size);
-	buf->fill++;
+	unsigned int ret = 0;
+
+	if (lirc_buffer_len(buf) >= buf->chunk_size)
+		ret = kfifo_out_locked(&buf->fifo, dest, buf->chunk_size,
+				      &buf->fifo_lock);
+	return ret;
 }
-#endif
-static inline void lirc_buffer_write(struct lirc_buffer *buf,
+static inline unsigned int lirc_buffer_write(struct lirc_buffer *buf,
 				     unsigned char *orig)
 {
-#ifdef LIRC_HAVE_KFIFO
-	kfifo_put(buf->fifo, orig, buf->chunk_size);
-#else
-	unsigned long flags;
-	lirc_buffer_lock(buf, &flags);
-	_lirc_buffer_write_1(buf, orig);
-	lirc_buffer_unlock(buf, &flags);
-#endif
-}
-#ifndef LIRC_HAVE_KFIFO
-static inline void _lirc_buffer_write_n(struct lirc_buffer *buf,
-					unsigned char *orig, int count)
-{
-	int space1;
-	if (buf->head > buf->tail)
-		space1 = buf->head - buf->tail;
-	else
-		space1 = buf->size - buf->tail;
-
-	if (count > space1) {
-		memcpy(&buf->data[buf->tail * buf->chunk_size], orig,
-		       space1 * buf->chunk_size);
-		memcpy(&buf->data[0], orig + (space1 * buf->chunk_size),
-		       (count - space1) * buf->chunk_size);
-	} else {
-		memcpy(&buf->data[buf->tail * buf->chunk_size], orig,
-		       count * buf->chunk_size);
-	}
-	buf->tail = mod(buf->tail + count, buf->size);
-	buf->fill += count;
+	unsigned int ret;
+
+	ret = kfifo_in_locked(&buf->fifo, orig, buf->chunk_size,
+                              &buf->fifo_lock);
+
+	return ret;
 }
-#endif
-static inline void lirc_buffer_write_n(struct lirc_buffer *buf,
-				       unsigned char *orig, int count)
+static inline unsigned int lirc_buffer_write_n(struct lirc_buffer *buf,
+                                       unsigned char *orig, int count)
 {
-#ifdef LIRC_HAVE_KFIFO
-	kfifo_put(buf->fifo, orig, count * buf->chunk_size);
-#else
-	unsigned long flags;
-	lirc_buffer_lock(buf, &flags);
-	_lirc_buffer_write_n(buf, orig, count);
-	lirc_buffer_unlock(buf, &flags);
-#endif
+	unsigned int ret;
+
+	ret = kfifo_in_locked(&buf->fifo, orig, count * buf->chunk_size,
+                              &buf->fifo_lock);
+
+	return ret;
 }
 
 struct lirc_driver {
